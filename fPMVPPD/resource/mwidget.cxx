// generated by Fast Light User Interface Designer (fluid) version 1.0309

#include "mwidget.hxx"

Fl_Double_Window* MWidget::make_window() {
  { mWindow = new Fl_Double_Window(300, 355, "PMV PPD Calc");
    mWindow->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 25, 300, 175, "Input");
      o->box(FL_DOWN_BOX);
      { spCLO = new Fl_Spinner(100, 25, 190, 25, "CLO [clo]");
        spCLO->tooltip("clothing insulation [clo]");
        spCLO->type(1);
        spCLO->minimum(0);
        spCLO->maximum(999999);
        spCLO->step(0.1);
        spCLO->value(0.5);
      } // Fl_Spinner* spCLO
      { spMET = new Fl_Spinner(100, 50, 190, 25, "MET [met]");
        spMET->tooltip("metabolic rate [met]");
        spMET->type(1);
        spMET->minimum(0);
        spMET->maximum(999999);
        spMET->step(0.1);
        spMET->value(1.2);
      } // Fl_Spinner* spMET
      { spWME = new Fl_Spinner(100, 75, 190, 25, "WME [met]");
        spWME->tooltip("mechanical work [met]");
        spWME->type(1);
        spWME->minimum(0);
        spWME->maximum(999999);
        spWME->step(0.1);
        spWME->value(0);
      } // Fl_Spinner* spWME
      { spTA = new Fl_Spinner(100, 100, 190, 25, "TA [Celsius]");
        spTA->tooltip("air temperature [Celsius]");
        spTA->type(1);
        spTA->minimum(-273.15);
        spTA->maximum(999999);
        spTA->step(0.1);
        spTA->value(22);
      } // Fl_Spinner* spTA
      { spVEL = new Fl_Spinner(100, 125, 190, 25, "VEL [m/s]");
        spVEL->tooltip("air speed [m/s]");
        spVEL->type(1);
        spVEL->minimum(0);
        spVEL->maximum(999999);
        spVEL->step(0.1);
        spVEL->value(0.1);
      } // Fl_Spinner* spVEL
      { spTR = new Fl_Spinner(100, 150, 190, 25, "MRT [Celsius]");
        spTR->tooltip("mean radiant temperature [Celsius]");
        spTR->type(1);
        spTR->minimum(-273.15);
        spTR->maximum(999999);
        spTR->step(0.1);
        spTR->value(22);
      } // Fl_Spinner* spTR
      { spRH = new Fl_Spinner(100, 170, 190, 25, "RH [%]");
        spRH->tooltip("relative humidity [%]");
        spRH->type(1);
        spRH->minimum(0);
        spRH->step(0.1);
        spRH->value(60);
      } // Fl_Spinner* spRH
      o->end();
    } // Fl_Group* o
    { bnCalc = new Fl_Button(5, 200, 290, 25, "CALCUNAR");
      bnCalc->callback((Fl_Callback*)onBnCalc, (void*)(this));
    } // Fl_Button* bnCalc
    { Fl_Group* o = new Fl_Group(0, 240, 300, 85, "Output");
      o->box(FL_DOWN_BOX);
      { spPMV = new Fl_Output(100, 245, 190, 25, "PMV");
        spPMV->tooltip("predicted mean vote");
      } // Fl_Output* spPMV
      { spPPD = new Fl_Output(100, 270, 190, 25, "PPD [%]");
        spPPD->tooltip("predicted percentage of dissatisfied [%]");
      } // Fl_Output* spPPD
      { spSET = new Fl_Output(100, 295, 190, 25, "SET [Celsius]");
        spSET->tooltip("standard effective temperature [Celsius]");
      } // Fl_Output* spSET
      o->end();
    } // Fl_Group* o
    { bnGen = new Fl_Button(5, 330, 140, 25, "Generate template");
      bnGen->tooltip("Generate template table file, using .csv format.");
      bnGen->callback((Fl_Callback*)onBnGen, (void*)(this));
    } // Fl_Button* bnGen
    { bnHandle = new Fl_Button(150, 330, 145, 25, "Handle .csv table");
      bnHandle->tooltip("Upload and handle table file, using .csv format.");
      bnHandle->callback((Fl_Callback*)onBnHandle, (void*)(this));
    } // Fl_Button* bnHandle
    mWindow->end();
  } // Fl_Double_Window* mWindow
  return mWindow;
}
